package telegram

import (
	"log"
	"salary-bot/internal/app/service"
	"salary-bot/pkg/calendar"
	"salary-bot/internal/delivery/telegram/router"
	"salary-bot/internal/delivery/telegram/flows"
	"strconv"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
)

type Handler struct {
	Bot           *telebot.Bot
	Shifts        *service.ShiftServiceImpl
	Async         *service.AsyncService
	Employees     *service.EmployeeService
	Calendar      *calendar.CalendarController
	waitingAmount map[int64]time.Time 
	waitingPayout map[int64]bool      
}


func (h *Handler) Register() {
	h.Bot.Handle("/start", h.handleStart)
	h.Bot.Handle("/employees", h.handleEmployees)
	h.Bot.Handle("/resetme", h.handleResetMe)

	
	r := router.New()
	r.CalDelegate = h.RegisterHandlersCallback
	flows.RegisterSalary(r, h.Shifts)

	
	h.Bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
        
        raw := c.Data()
        raw = strings.TrimPrefix(raw, "\f")
        key := raw
        if i := strings.IndexByte(raw, '|'); i >= 0 {
            key = raw[:i]
        }
		
		log.Printf("[callback] raw=%q key=%q", raw, key)
		
		_ = c.Respond()

		// Handle calendar callbacks by prefix and exit early
        if strings.HasPrefix(key, "cal_") {
            if h.Calendar != nil {
                return h.RegisterHandlersCallback(c)
            }
            return nil
        }

		if handled, err := func() (bool, error) { return r.Dispatch(c) }(); handled {
			return err
		}
		
		switch key {
		case "resetme_confirm":
			empID := int(c.Sender().ID)
			if err := h.Shifts.ResetEmployeeData(empID); err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
			}
			// clear any waiting states
			if h.waitingAmount != nil { delete(h.waitingAmount, c.Chat().ID) }
			if h.waitingPayout != nil { delete(h.waitingPayout, c.Chat().ID) }
			if err := c.Edit("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", &telebot.ReplyMarkup{}); err != nil {
				_ = c.Send("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
			}
			return nil
		case "addshift_today":
			date := time.Now()
			log.Printf("[callback] addshift_today chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			m := &telebot.ReplyMarkup{}
			btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
			m.Inline(m.Row(btnCancel))
			if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã "+date.Format("02.01.2006")+":", m); err != nil {
				_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã "+date.Format("02.01.2006")+":", m)
			}
			if h.waitingAmount == nil {
				h.waitingAmount = make(map[int64]time.Time)
			}
			h.waitingAmount[c.Chat().ID] = date
			log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			return nil
		case "addshift_other":
			if h.Calendar != nil {
				h.Calendar.OnDate = func(date time.Time, c telebot.Context) error {
					log.Printf("[callback] other_day_shift picked date chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					m := &telebot.ReplyMarkup{}
					btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
					m.Inline(m.Row(btnCancel))
					if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã "+date.Format("02.01.2006")+":", m); err != nil {
						_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã "+date.Format("02.01.2006")+":", m)
					}
					if h.waitingAmount == nil {
						h.waitingAmount = make(map[int64]time.Time)
					}
					h.waitingAmount[c.Chat().ID] = date
					log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					return nil
				}
				return h.Calendar.ShowCalendar(c)
			}
			return nil
		case "cancel_flow":
			
			if h.waitingAmount != nil {
				delete(h.waitingAmount, c.Chat().ID)
			}
			if h.waitingPayout != nil {
				delete(h.waitingPayout, c.Chat().ID)
			}
			if err := c.Edit("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); err != nil {
				_ = c.Send("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
			}
			return nil
		case "payout_all":
			empID := int(c.Sender().ID)
			err := h.Shifts.MarkShiftsPaid(empID, time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC), time.Now().AddDate(10, 0, 0))
			if err != nil {
				if err := c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ: " + err.Error()); err != nil {
					_ = c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ: " + err.Error())
				}
				return nil
			}
			if err := c.Edit("–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å—ë!"); err != nil {
				_ = c.Send("–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å—ë!")
			}
			
			if h.waitingPayout != nil {
				delete(h.waitingPayout, c.Chat().ID)
			}
			return nil
		case "salary_range":
			
			if h.Calendar != nil {
				c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
				h.Calendar.OnDate = func(start time.Time, c telebot.Context) error {
					_ = c.Send("–ù–∞—á–∞–ª–æ: " + start.Format("02.01.2006") + "\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É")
					
					h.Calendar.OnDate = func(end time.Time, c telebot.Context) error {
						if end.Before(start) {
							start, end = end, start
						}
						empID := int(c.Sender().ID)
						from := time.Date(start.Year(), start.Month(), start.Day(), 0, 0, 0, 0, time.UTC)
						to := time.Date(end.Year(), end.Month(), end.Day(), 23, 59, 59, 0, time.UTC)
						
						shifts, err := h.Shifts.GetShifts(empID, from, to)
						if err != nil {
							return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω: " + err.Error())
						}
						var total float64
						for _, s := range shifts {
							total += s.Amount
						}
						return c.Send("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ " + start.Format("02.01.2006") + " - " + end.Format("02.01.2006") + ": " + strconv.FormatFloat(total, 'f', 2, 64))
					}
					return h.Calendar.ShowCalendar(c)
				}
				return h.Calendar.ShowCalendar(c)
			}
			return nil
		}
		return nil
	})

	
	h.Bot.Handle(telebot.OnText, func(c telebot.Context) error {
		chatID := c.Chat().ID
		
		txt := strings.TrimSpace(strings.ToLower(c.Text()))

		
		switch txt {
		case "–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel", "—Å—Ç–æ–ø", "/stop":
			if h.waitingAmount != nil {
				delete(h.waitingAmount, chatID)
			}
			if h.waitingPayout != nil {
				delete(h.waitingPayout, chatID)
			}
			return c.Send("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
		}
		        
        
        if c.Text() == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É" {
            markup := &telebot.ReplyMarkup{}
            btnCancel := markup.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
            btnToday := markup.Data("üìÖ –°–µ–≥–æ–¥–Ω—è", "addshift_today")
            btnOther := markup.Data("üìÜ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", "addshift_other")
            markup.Inline(markup.Row(btnToday, btnOther), markup.Row(btnCancel))
            
            if h.waitingPayout != nil {
                delete(h.waitingPayout, chatID)
            }
            if h.waitingAmount != nil {
                delete(h.waitingAmount, chatID)
            }
            return c.Send("–≠—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞?", markup)
        }
        if c.Text() == "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞" {
            
            if h.waitingPayout != nil {
                delete(h.waitingPayout, chatID)
            }
            if h.waitingAmount != nil {
                delete(h.waitingAmount, chatID)
            }
            empID := int(c.Sender().ID)
            now := time.Now()
            mFrom := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC)
            mTo := time.Date(now.Year(), now.Month()+1, 0, 0, 0, 0, 0, time.UTC)
            monthTotal, err := h.Shifts.CalculateSalary(empID, mFrom, mTo)
            if err != nil {
                return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: "+err.Error())
            }
            allFrom := time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)
            allTo := time.Now().AddDate(10, 0, 0)
            allShifts, err := h.Shifts.GetShifts(empID, allFrom, allTo)
            if err != nil {
                return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
            }
            var unpaidTotal float64
            for _, s := range allShifts { if !s.Paid { unpaidTotal += s.Amount } }
            markup := &telebot.ReplyMarkup{}
            btnOtherMonth := markup.Data("üìä –î—Ä—É–≥–æ–π –º–µ—Å—è—Ü", "salary_other_month")
            btnRange := markup.Data("üóìÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", "salary_range")
            markup.Inline(markup.Row(btnOtherMonth), markup.Row(btnRange))
            msg := "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: "+strconv.FormatFloat(monthTotal, 'f', 2, 64)+"\n"+
                "–ù–µ–≤—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: "+strconv.FormatFloat(unpaidTotal, 'f', 2, 64)
            return c.Send(msg, markup)
        }
        if c.Text() == "üí∏ –í—ã–ø–ª–∞—Ç–∞" {
            markup := &telebot.ReplyMarkup{}
            btnCancel := markup.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
            btnAll := markup.Data("‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å –≤—Å—ë", "payout_all")
            markup.Inline(markup.Row(btnAll), markup.Row(btnCancel))
            
            if h.waitingAmount != nil { delete(h.waitingAmount, chatID) }
            if h.waitingPayout == nil { h.waitingPayout = make(map[int64]bool) }
            h.waitingPayout[chatID] = true
            return c.Send("–°–∫–æ–ª—å–∫–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –≤—ã–±–µ—Ä–∏—Ç–µ '–í—ã–ø–ª–∞—Ç–∏—Ç—å –≤—Å—ë' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", markup)
        }

        
        if h.waitingAmount != nil {
            if date, ok := h.waitingAmount[chatID]; ok {
                amount, err := strconv.ParseFloat(c.Text(), 64)
                if err != nil {
                    m := &telebot.ReplyMarkup{}
                    btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
                    m.Inline(m.Row(btnCancel))
                    return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", m)
                }
                if amount < 1 {
                    m := &telebot.ReplyMarkup{}
                    btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
                    m.Inline(m.Row(btnCancel))
                    return c.Send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑.", m)
                }
                if err := h.Shifts.AddShift(int(c.Sender().ID), date, amount); err != nil {
                    return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: "+err.Error())
                }
                delete(h.waitingAmount, chatID)
                return c.Send("–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            }
        }
        
        if h.waitingPayout != nil {
            if _, ok := h.waitingPayout[chatID]; ok {
                empID := int(c.Sender().ID)
                amount, err := strconv.ParseFloat(c.Text(), 64)
                if err != nil {
                    m := &telebot.ReplyMarkup{}
                    btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
                    m.Inline(m.Row(btnCancel))
                    return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", m)
                }
                if amount < 1 {
                    m := &telebot.ReplyMarkup{}
                    btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
                    m.Inline(m.Row(btnCancel))
                    return c.Send("–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑.", m)
                }
                
                allFrom := time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)
                allTo := time.Now().AddDate(10, 0, 0)
                allShifts, err := h.Shifts.GetShifts(empID, allFrom, allTo)
                if err != nil {
                    return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
                }
                var unpaidTotal float64
                for _, s := range allShifts {
                    if !s.Paid { unpaidTotal += s.Amount }
                }
                if amount > unpaidTotal+1e-9 {
                    m := &telebot.ReplyMarkup{}
                    btnCancel := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
                    m.Inline(m.Row(btnCancel))
                    return c.Send("–ù–µ–ª—å–∑—è –≤—ã–ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: "+strconv.FormatFloat(unpaidTotal, 'f', 2, 64), m)
                }
                if err := h.Shifts.MarkShiftsPaidAmount(empID, amount); err != nil {
                    return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: "+err.Error())
                }
                delete(h.waitingPayout, chatID)
                return c.Send("–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É "+strconv.FormatFloat(amount, 'f', 2, 64)+" –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!")
            }
        }
        return nil
    })
}


func (h *Handler) RegisterHandlersCallback(c telebot.Context) error {
    if h.Calendar != nil {
        raw := c.Data()
        raw = strings.TrimPrefix(raw, "\f")
        split := strings.SplitN(raw, "|", 2)
        if len(split) != 2 {
            return nil
        }
        payload := split[1]
		switch split[0] {
		case "cal_day":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 3 {
				return c.Send("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã", &telebot.ReplyMarkup{})
			}
			day, _ := strconv.Atoi(parts[0])
			month, _ := strconv.Atoi(parts[1])
			year, _ := strconv.Atoi(parts[2])
			date := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.UTC)
			if h.Calendar.OnDate != nil {
				return h.Calendar.OnDate(date, c)
			}
			return c.Send("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã", &telebot.ReplyMarkup{})
		case "cal_prev":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞ –º–µ—Å—è—Ü–∞", &telebot.ReplyMarkup{})
			}
			month, _ := strconv.Atoi(parts[0])
			year, _ := strconv.Atoi(parts[1])
			if month < 1 {
				month = 12
				year--
			}
			return calendar.SendCalendar(c, year, month)
		case "cal_next":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞ –º–µ—Å—è—Ü–∞", &telebot.ReplyMarkup{})
			}
			month, _ := strconv.Atoi(parts[0])
			year, _ := strconv.Atoi(parts[1])
			if month > 12 {
				month = 1
				year++
			}
			return calendar.SendCalendar(c, year, month)
		}
	}
	return nil
}


func (h *Handler) handleStart(c telebot.Context) error {
    
    if h.waitingAmount != nil {
        delete(h.waitingAmount, c.Chat().ID)
    }
    if h.waitingPayout != nil {
        delete(h.waitingPayout, c.Chat().ID)
    }
    
    m := &telebot.ReplyMarkup{ResizeKeyboard: true}
    btnAdd := m.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É")
    btnSalary := m.Text("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞")
    btnPayout := m.Text("üí∏ –í—ã–ø–ª–∞—Ç–∞")
    m.Reply(m.Row(btnAdd), m.Row(btnSalary, btnPayout))
    return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", m)
}


func (h *Handler) handleEmployees(c telebot.Context) error {
    return c.Send("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
}

// /resetme ‚Äî —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –µ–≥–æ Telegram ID -> employeeID)
func (h *Handler) handleResetMe(c telebot.Context) error {
    empID := int(c.Sender().ID)
    // –®–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(c.Args()) == 0 {
        m := &telebot.ReplyMarkup{}
        yes := m.Data("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "resetme_confirm")
        no := m.Data("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_flow")
        m.Inline(m.Row(yes), m.Row(no))
        return c.Send("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–º–µ–Ω—ã –∏ –≤—ã–ø–ª–∞—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", m)
    }
    // –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /resetme confirm
    if len(c.Args()) > 0 && strings.EqualFold(c.Args()[0], "confirm") {
        if err := h.Shifts.ResetEmployeeData(empID); err != nil {
            return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
        }
        if h.waitingAmount != nil { delete(h.waitingAmount, c.Chat().ID) }
        if h.waitingPayout != nil { delete(h.waitingPayout, c.Chat().ID) }
        return c.Send("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    }
    return c.Send("–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: /resetme confirm")
}


