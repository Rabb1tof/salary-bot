package telegram

import (
	"log"
	"salary-bot/internal/app/service"
	"salary-bot/internal/domain"
	"salary-bot/pkg/calendar"
	"strconv"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
)

type Handler struct {
	Bot           *telebot.Bot
	Shifts        *service.ShiftServiceImpl
	Async         *service.AsyncService
	Employees     *service.EmployeeService
	Calendar      *calendar.CalendarController
	waitingAmount map[int64]time.Time // chatID -> –¥–∞—Ç–∞ —Å–º–µ–Ω—ã
}

// –ù–æ–≤–∞—è Register —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
func (h *Handler) Register() {
	h.Bot.Handle("/start", h.handleStart)
	h.Bot.Handle("/employees", h.handleEmployees)

	// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
	h.Bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º callback-–¥–∞–Ω–Ω—ã–µ: —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "\f" –∏ –æ—Ç–¥–µ–ª—è–µ–º payload –ø–æ—Å–ª–µ '|'
		raw := c.Data()
		raw = strings.TrimPrefix(raw, "\f")
		key := raw
		if i := strings.IndexByte(raw, '|'); i >= 0 {
			key = raw[:i]
		}
		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
		log.Printf("[callback] raw=%q key=%q", raw, key)
		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram —É–±—Ä–∞–ª —á–∞—Å–∏–∫–∏
		_ = c.Respond()
		// –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ callback-–∫–æ–¥—ã
		if strings.HasPrefix(key, "cal_") {
			if h.Calendar != nil {
				// –í—ã–∑–æ–≤–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—Ä—É—á–Ω—É—é
				return h.RegisterHandlersCallback(c)
			}
			return nil
		}
		switch key {
		case "addshift_today":
			date := time.Now()
			log.Printf("[callback] addshift_today chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":"); err != nil {
				_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":")
			}
			if h.waitingAmount == nil {
				h.waitingAmount = make(map[int64]time.Time)
			}
			h.waitingAmount[c.Chat().ID] = date
			log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			return nil
		case "addshift_other":
			if h.Calendar != nil {
				h.Calendar.OnDate = func(date time.Time, c telebot.Context) error {
					log.Printf("[callback] addshift_other picked date chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":"); err != nil {
						_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":")
					}
					if h.waitingAmount == nil {
						h.waitingAmount = make(map[int64]time.Time)
					}
					h.waitingAmount[c.Chat().ID] = date
					log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					return nil
				}
				return h.Calendar.ShowCalendar(c)
			}
			return nil
		case "payout_all":
			empID := int(c.Sender().ID)
			err := h.Shifts.MarkShiftsPaid(empID, time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC), time.Now().AddDate(10, 0, 0))
			if err != nil {
				if err := c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ: " + err.Error()); err != nil {
					_ = c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ: " + err.Error())
				}
				return nil
			}
			if err := c.Edit("–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å—ë!"); err != nil {
				_ = c.Send("–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å—ë!")
			}
			return nil
		case "today_shift":
			date := time.Now()
			log.Printf("[callback] today_shift chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":"); err != nil {
				_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":")
			}
			if h.waitingAmount == nil {
				h.waitingAmount = make(map[int64]time.Time)
			}
			h.waitingAmount[c.Chat().ID] = date
			log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
			return nil
		case "other_day_shift":
			if h.Calendar != nil {
				h.Calendar.OnDate = func(date time.Time, c telebot.Context) error {
					log.Printf("[callback] other_day_shift picked date chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					if err := c.Edit("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":"); err != nil {
						_ = c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–º–µ–Ω—ã " + date.Format("02.01.2006") + ":")
					}
					if h.waitingAmount == nil {
						h.waitingAmount = make(map[int64]time.Time)
					}
					h.waitingAmount[c.Chat().ID] = date
					log.Printf("[state] waitingAmount set for chat=%d date=%s", c.Chat().ID, date.Format("2006-01-02"))
					return nil
				}
				return h.Calendar.ShowCalendar(c)
			}
			return nil
		}
		return nil
	})

	// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	h.Bot.Handle(telebot.OnText, func(c telebot.Context) error {
		chatID := c.Chat().ID
		// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—É–º–º–∞ –¥–ª—è —Å–º–µ–Ω—ã
		if h.waitingAmount != nil {
			if date, ok := h.waitingAmount[chatID]; ok {
				amount, err := strconv.ParseFloat(c.Text(), 64)
				if err != nil {
					return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
				}
				err = h.Shifts.AddShift(int(c.Sender().ID), date, amount)
				if err != nil {
					return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: " + err.Error())
				}
				delete(h.waitingAmount, chatID)
				return c.Send("–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
			}
		}
		// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
		if c.Text() != btnAddShift.Text && c.Text() != btnSalary.Text && c.Text() != btnPayout.Text {
			empID := int(c.Sender().ID)
			amount, err := strconv.ParseFloat(c.Text(), 64)
			if err == nil && amount > 0 {
				err := h.Shifts.MarkShiftsPaidAmount(empID, amount)
				if err != nil {
					return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: " + err.Error())
				}
				return c.Send("–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É " + strconv.FormatFloat(amount, 'f', 2, 64) + " –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!")
			}
		}
		// –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
		switch c.Text() {
		case btnAddShift.Text:
			markup := &telebot.ReplyMarkup{}
			btnToday := markup.Data("–°–µ–≥–æ–¥–Ω—è", "addshift_today")
			btnOther := markup.Data("–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", "addshift_other")
			markup.Inline(markup.Row(btnToday, btnOther))
			return c.Send("–≠—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞?", markup)
		case btnSalary.Text:
			empID := int(c.Sender().ID)
			now := time.Now()
			from := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC)
			to := time.Date(now.Year(), now.Month()+1, 0, 0, 0, 0, 0, time.UTC)
			shifts, err := h.Shifts.GetShifts(empID, from, to)
			if err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: " + err.Error())
			}
			var unpaid float64
			for _, s := range shifts {
				if !s.Paid {
					unpaid += s.Amount
				}
			}
			return c.Send("–ù–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü: " + strconv.FormatFloat(unpaid, 'f', 2, 64))
		case btnPayout.Text:
			markup := &telebot.ReplyMarkup{}
			btnAll := markup.Data("–í—ã–ø–ª–∞—Ç–∏—Ç—å –≤—Å—ë", "payout_all")
			markup.Inline(markup.Row(btnAll))
			h.waitingAmount = nil // —Å–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è —Å–º–µ–Ω—ã
			return c.Send("–°–∫–æ–ª—å–∫–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í—ã–ø–ª–∞—Ç–∏—Ç—å –≤—Å—ë'.", markup)
		}
		return nil
	})

	// –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π OnCallback —É –∫–∞–ª–µ–Ω–¥–∞—Ä—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–ª –Ω–∞—à –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ RegisterHandlersCallback.
}

func (h *Handler) handleEmployees(c telebot.Context) error {
	employees, err := h.Employees.GetAllEmployees()
	if err != nil {
		err = c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: " + err.Error())
		return err
	}
	if len(employees) == 0 {
		err = c.Send("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return err
	}
	msg := "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
	for _, e := range employees {
		msg += "ID: " + strconv.Itoa(e.ID) + ", " + e.Name + " (" + e.Role + ")\n"
	}
	err = c.Send(msg)
	return err
}

var (
	btnAddShift = telebot.Btn{Text: "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É"}
	btnSalary   = telebot.Btn{Text: "üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É"}
	btnPayout   = telebot.Btn{Text: "üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å"}
)

// –£–¥–∞–ª—è—é editOrSend –∏ lastMsgID/lastMsgMu, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ–±—ã—á–Ω—ã–µ c.Send/c.Edit –≤–µ–∑–¥–µ, –≥–¥–µ —ç—Ç–æ –±—ã–ª–æ –¥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.

func (h *Handler) handleStart(c telebot.Context) error {
	empID := int(c.Sender().ID)
	if _, err := h.Employees.GetEmployeeByID(empID); err != nil {
		// –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—Ç—å
		emp := serviceEmployeeFromContext(c)
		_ = h.Employees.CreateOrUpdateEmployee(emp)
	}
	markup := &telebot.ReplyMarkup{ResizeKeyboard: true}
	markup.Reply(
		markup.Row(markup.Text(btnAddShift.Text)),
		markup.Row(markup.Text(btnSalary.Text)),
		markup.Row(markup.Text(btnPayout.Text)),
	)
	err := c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", markup)
	return err
}

// serviceEmployeeFromContext —Å–æ–∑–¥–∞–µ—Ç Employee –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram
func serviceEmployeeFromContext(c telebot.Context) domain.Employee {
	return domain.Employee{
		ID:     int(c.Sender().ID),
		Name:   c.Sender().FirstName,
		ChatID: c.Chat().ID,
		Role:   "employee",
	}
}

// –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–∑ OnCallback)
func (h *Handler) RegisterHandlersCallback(c telebot.Context) error {
	if h.Calendar != nil {
		raw := c.Data()
		raw = strings.TrimPrefix(raw, "\f")
		split := strings.SplitN(raw, "|", 2)
		if len(split) != 2 {
			return nil
		}
		payload := split[1]
		switch split[0] {
		case "cal_day":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 3 {
				return c.Send("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã", &telebot.ReplyMarkup{})
			}
			day, _ := strconv.Atoi(parts[0])
			month, _ := strconv.Atoi(parts[1])
			year, _ := strconv.Atoi(parts[2])
			date := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.UTC)
			if h.Calendar.OnDate != nil {
				return h.Calendar.OnDate(date, c)
			}
			return c.Send("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã", &telebot.ReplyMarkup{})
		case "cal_prev":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞ –º–µ—Å—è—Ü–∞", &telebot.ReplyMarkup{})
			}
			month, _ := strconv.Atoi(parts[0])
			year, _ := strconv.Atoi(parts[1])
			if month < 1 {
				month = 12
				year--
			}
			return calendar.SendCalendar(c, year, month)
		case "cal_next":
			parts := calendar.SplitDateData(payload)
			if len(parts) != 2 {
				return c.Send("–û—à–∏–±–∫–∞ –º–µ—Å—è—Ü–∞", &telebot.ReplyMarkup{})
			}
			month, _ := strconv.Atoi(parts[0])
			year, _ := strconv.Atoi(parts[1])
			if month > 12 {
				month = 1
				year++
			}
			return calendar.SendCalendar(c, year, month)
		}
	}
	return nil
}

// Inline-–∫–Ω–æ–ø–∫–∏
